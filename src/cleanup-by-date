#!/usr/bin/env bash
set -euo pipefail

show_help() {
  cat <<EOF
Usage: cleanup-by-date <path> <period> [--regex <regex>] [--log <file>] [--dry-run] [--now <date>]

Arguments:
  <path>        Directory to scan
  <period>      Time threshold (e.g. 7d, 1w, 24h, 1y)

Options:
  --regex <regex> Regex with optional capturing group for date (default: ([0-9]{4}-[0-9]{2}-[0-9]{2}(_[0-9]{4})?))
  --log <file>    Write actions to specified log file
  --dry-run       Simulate deletions
  --now <date>    Override current date (format: 'YYYY-MM-DD HH:MM:SS')

Date format:
  Expected: 2024-12-01 or 2024-12-01_1200
  If regex has a group, it must capture this part.
EOF
}

if [[ $# -lt 2 ]] || [[ $1 == "--help" ]]; then
  show_help
  exit 0
fi

DIR=$1
PERIOD=$2
shift 2

REGEX='([0-9]{4}-[0-9]{2}-[0-9]{2}(_[0-9]{4})?)'
DRY_RUN=false
LOG_FILE=""
NOW_OVERRIDE=""

while (($#)); do
  case $1 in
    --regex)
      if [[ $# -ge 2 ]]; then
        REGEX=$2
        shift
      else
        echo "Missing value for --regex" >&2
        exit 1
      fi
      ;;
    --log)
      if [[ $# -ge 2 ]]; then
        LOG_FILE=$2
        touch "$LOG_FILE" 2>/dev/null || {
          echo "[ERROR] Cannot write log file: $LOG_FILE" >&2
          exit 6
        }
        shift
      else
        echo "Missing value for --log" >&2
        exit 1
      fi
      ;;
    --dry-run) DRY_RUN=true ;;
    --now)
      if [[ $# -ge 2 ]]; then
        NOW_OVERRIDE=$2
        shift
      else
        echo "Missing value for --now" >&2
        exit 1
      fi
      ;;
    *) echo "Unknown option: $1" >&2; show_help; exit 1 ;;
  esac
  shift
done

if [[ ! -d "$DIR" ]]; then
  echo "[ERROR] Directory does not exist: $DIR" >&2
  exit 2
fi

DATE_BIN=$(command -v gdate || command -v date)

if [[ -n "$NOW_OVERRIDE" ]]; then
  now_local=$($DATE_BIN -u -d "$NOW_OVERRIDE" "+%Y-%m-%d %H:%M:%S") || {
    echo "[ERROR] Invalid date for --now: $NOW_OVERRIDE" >&2
    exit 3
  }
else
  now_local=$($DATE_BIN -u "+%Y-%m-%d %H:%M:%S")
fi

case $PERIOD in
  *y) unit=year; val="${PERIOD%y}" ;;
  *w) unit=week; val="${PERIOD%w}" ;;
  *m) unit=month; val="${PERIOD%m}" ;;
  *d) unit=day;  val="${PERIOD%d}" ;;
  *h) unit=hour; val="${PERIOD%h}" ;;
  *) echo "[ERROR] Invalid period format: $PERIOD" >&2; exit 3 ;;
esac

if [[ "$val" == "0" ]]; then
  cutoff="$now_local"
else
  cutoff=$($DATE_BIN -u -d "$now_local UTC -${val} ${unit}" "+%Y-%m-%d %H:%M:%S")
fi

log() {
  local msg="[INFO] $1"
  {
    if [[ -n "$LOG_FILE" ]]; then
      echo "$msg" >>"$LOG_FILE"
    else
      echo "$msg"
    fi
  } || true
}

extract_datetime() {
  local input="$1"
  if [[ $input =~ ([0-9]{4}-[0-9]{2}-[0-9]{2})_([0-9]{4}) ]]; then
    echo "${BASH_REMATCH[1]} ${BASH_REMATCH[2]:0:2}:${BASH_REMATCH[2]:2:2}"
  elif [[ $input =~ ([0-9]{4}-[0-9]{2}-[0-9]{2}) ]]; then
    echo "${BASH_REMATCH[1]} 00:00"
  else
    return 1
  fi
}

validate_regex() {
  local regex="$1"
  local dir="$2"
  local found=""
  local f fname full

  for f in "$dir"/*; do
    [[ -f "$f" ]] || continue
    fname=$(basename "$f")
    if [[ "$fname" =~ $regex ]]; then
      if [[ ${#BASH_REMATCH[@]} -gt 1 ]]; then
        found="${BASH_REMATCH[1]}"
      else
        found="${BASH_REMATCH[0]}"
      fi
      break
    fi
  done

  if [[ -z $found ]]; then
    echo "[ERROR] Regex does not match any filenames in $dir" >&2
    exit 4
  fi

  full=$(extract_datetime "$found") || {
    echo "[ERROR] Extracted date '$found' is not parseable" >&2
    exit 4
  }

  if ! $DATE_BIN -u -d "$full" "+%Y-%m-%d %H:%M:%S" >/dev/null 2>&1; then
    echo "[WARN] Skipping unparseable datetime: $full"
    return 0
  fi
}

validate_regex "$REGEX" "$DIR"

log "NOW=$now_local, PERIOD=$PERIOD, CUTOFF=$cutoff, DRY_RUN=$DRY_RUN"
log "Using regex: $REGEX"

deleted=0
for file in "$DIR"/*; do
  [[ -f "$file" ]] || continue
  fname=$(basename "$file")
  if [[ "$fname" =~ $REGEX ]]; then
    if [[ ${#BASH_REMATCH[@]} -gt 1 ]]; then
      match="${BASH_REMATCH[1]}"
    else
      match="${BASH_REMATCH[0]}"
    fi

    parsed_date=$(extract_datetime "$match" 2>/dev/null) || {
      log "Skipping file with unparsable datetime: $fname"
      continue
    }

    file_ts=$($DATE_BIN -u -d "$parsed_date" +%s 2>/dev/null) || {
      log "Skipping file with invalid timestamp: $fname"
      continue
    }

    cutoff_ts=$($DATE_BIN -u -d "$cutoff" +%s 2>/dev/null) || {
      echo "[ERROR] Failed to parse cutoff: '$cutoff'" >&2
      exit 5
    }

    if (( file_ts < cutoff_ts )); then
      if [[ "$DRY_RUN" == true ]]; then
        log "Would delete: $file (file date: $parsed_date)"
      else
        rm -f "$file" || log "[WARN] Failed to delete $file"
        log "Deleted: $file (file date: $parsed_date)"
      fi
      ((deleted++))
    fi
  fi
done

log "Done. Files deleted: $deleted"
log "Reached end of script cleanly"
exit 0
